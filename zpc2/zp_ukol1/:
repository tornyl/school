#include <stdio.h>
#include <stdlib.h>

typedef struct Cell_{
	int value;
	int i;
	int j;
	struct Cell_* row_next;
	struct Cell_* column_next;
	
}Cell;

typedef struct Line_{
	int index;
	struct Line_* next;
	Cell* first_cell;
}Line;

typedef struct{
	int rows;
	int columns;
	Line* first_row;
	Line* first_column;
	
}Matrix;


Matrix *create_matrix(double values[], size_t rows, size_t cols){
	Matrix *m = malloc(sizeof(Matrix));
	m->rows = rows;
	m->columns = cols;
	Line *curr_row = (Line*) malloc(sizeof(Line));
	Line *curr_column = (Line*) malloc(sizeof(Line));
	m->first_row = curr_row;
	m->first_column  = curr_column;
	for(int i = 1; i < rows; i++){
		curr_row->index = i;
		curr_row->next = (Line*) malloc(sizeof(Line));
		curr_row = curr_row->next;
	}

	for(int i = 1; i < cols; i++){
		curr_column->index = i;
		curr_column->next = (Line*) malloc(sizeof(Line));
		curr_column = curr_column->next;
	}
	Cell *previous_row[cols];
	curr_row = m->first_row;
	curr_column = m->first_column;
	Cell* prev_row_cell;
	for(int i = 0; i < rows; i++){
		for(int j = 0; j < cols; j++){
			if(!values[i* cols + j]){
				Cell *new_cell = (Cell*) malloc(sizeof(Cell));
				new_cell->value = values[cols * i + j];
				new_cell->i = i;
				new_cell->j = j;
				if(!prev_row_cell){
					prev_row_cell->row_next = new_cell;
				}
				prev_row_cell = new_cell;

				if(previous_row[j]) {
					previous_row[j]->column_next = new_cell;
					previous_row[j] = new_cell;
				}
				if(!curr_row->first_cell) curr_row->first_cell = new_cell;
				if(!curr_column->first_cell) curr_column->first_cell = new_cell;
			}

			curr_row =  curr_row->next;
			curr_column = curr_column->next;
		}
	}
	return m;
}

int main(){

	return 0;
}

